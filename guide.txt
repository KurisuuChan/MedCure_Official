## üì¶ DATABASE TABLES

---

### üè• `products` ‚Äî Stores information about medicines and products

```sql
CREATE TABLE products (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name TEXT NOT NULL,
  category TEXT,
  quantity INTEGER NOT NULL,
  price NUMERIC NOT NULL,
  expireDate DATE,
  productType TEXT,
  description TEXT,
  status TEXT DEFAULT 'Available',
  medicineId TEXT
);
```

---

### üí≥ `sales` ‚Äî Records each sale transaction

```sql
CREATE TABLE sales (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  total_amount NUMERIC NOT NULL,
  discount_applied BOOLEAN DEFAULT FALSE
);
```

---

### üßæ `sale_items` ‚Äî Links products to sales (many-to-many)

```sql
CREATE TABLE sale_items (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  sale_id BIGINT NOT NULL,
  product_id BIGINT NOT NULL,
  quantity INTEGER NOT NULL,
  price_at_sale NUMERIC NOT NULL,
  CONSTRAINT fk_sale FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE,
  CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);
```

---

### üé® `branding` ‚Äî Stores pharmacy branding (logo, name, etc.)

```sql
CREATE TABLE branding (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name TEXT,
  logo_url TEXT
);
```

---

### üë§ `avatars` ‚Äî Stores user avatars

```sql
CREATE TABLE avatars (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  fileName TEXT,
  url TEXT
);
```

---

## üõ°Ô∏è SUPABASE STORAGE POLICIES

---

### üìÅ `logos` Bucket

#### ‚úÖ Allow authenticated users to upload logos

```sql
CREATE POLICY "Allow authenticated users to upload logos"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'logos');
```

---

### üßë‚ÄçüñºÔ∏è `avatars` Bucket

#### 1. ‚úÖ Allow public read access to avatars

```sql
CREATE POLICY "Allow public read on avatars"
ON storage.objects
FOR SELECT
USING (bucket_id = 'avatars');
```

#### 2. ‚úÖ Allow users to upload their own avatar

```sql
CREATE POLICY "Allow insert for own avatar"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'avatars'
  AND auth.uid() = (storage.foldername(name))[1]::uuid
);
```

#### 3. ‚úÖ Allow users to update their own avatar

```sql
CREATE POLICY "Allow update for own avatar"
ON storage.objects
FOR UPDATE
TO authenticated
USING (auth.uid() = owner)
WITH CHECK (bucket_id = 'avatars');
```

#### 4. ‚úÖ Allow users to delete their own avatar

```sql
CREATE POLICY "Allow delete for own avatar"
ON storage.objects
FOR DELETE
TO authenticated
USING (auth.uid() = owner);
```

---

## üìå Notes:

* Ensure your **buckets** are named correctly in Supabase: `logos` and `avatars`.
* The `(storage.foldername(name))[1]::uuid` assumes you're storing files in folders named after the user's UUID, like `user-id/avatar.png`.
* For `owner`, Supabase expects you to set the `owner` column via **RLS metadata** or triggers if you're not manually setting it.

---

If you need help automating avatar upload logic or integrating this with React or Supabase client libraries, let me know!
